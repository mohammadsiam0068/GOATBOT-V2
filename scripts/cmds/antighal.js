const fs = require("fs");
const path = require("path");

// ‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
const dataDir = path.join(__dirname, "..", "data");
const badwordsPath = path.join(dataDir, "badwords.json");
const warnPath = path.join(dataDir, "warnData.json");
const banPath = path.join(dataDir, "bannedUsers.json");

// ‚úÖ ‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
const WARN_LIMIT = 3;

// ‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶°
let badWords = JSON.parse(fs.readFileSync(badwordsPath, "utf-8"));
let warnData = fs.existsSync(warnPath) ? JSON.parse(fs.readFileSync(warnPath)) : {};
let bannedUsers = fs.existsSync(banPath) ? new Set(JSON.parse(fs.readFileSync(banPath))) : new Set();

// ‚úÖ ‡¶∏‡ßá‡¶≠ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function saveWarnData() {
  fs.writeFileSync(warnPath, JSON.stringify(warnData, null, 2));
}

function saveBannedUsers() {
  fs.writeFileSync(banPath, JSON.stringify([...bannedUsers], null, 2));
}

// ‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function cleanMessage(msg) {
  return msg
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[\s\-_@!$#%^&*().=+<>?~`'"|\\/]/g, "");
}

module.exports = {
  config: {
    name: "antighal",
    version: "2.5",
    author: "Siam",
    role: 0,
    shortDescription: "Prefix ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ó‡¶æ‡¶≤‡¶ø ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®",
    longDescription: "‡¶ó‡¶æ‡¶≤‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶è‡¶¨‡¶Ç ‡ß© ‡¶¨‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®, ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ JSON ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü",
    category: "system",
    guide: "No command needed"
  },

  onChat: async function ({ event, api }) {
    const { senderID, body, threadID } = event;
    if (!body) return;

    // ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
    if (bannedUsers.has(senderID)) {
      return api.sendMessage("üö´ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶∞ ‡¶ó‡¶æ‡¶≤‡¶ø ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§", threadID);
    }

    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶ï‡¶∞‡ßã
    const cleanMsg = cleanMessage(body);

    // ‚úÖ ‡¶ó‡¶æ‡¶≤‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
    const hasBadWord = badWords.some(word => cleanMsg.includes(word));
    if (!hasBadWord) return;

    // ‚úÖ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡¶æ‡ßú‡¶æ‡¶ì
    if (!warnData[senderID]) {
      warnData[senderID] = 1;
    } else {
      warnData[senderID]++;
    }

    saveWarnData();

    // ‚úÖ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶™‡ßá‡¶∞‡¶ø‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá?
    if (warnData[senderID] >= WARN_LIMIT) {
      bannedUsers.add(senderID);
      saveBannedUsers();
      return api.sendMessage(`‚õî ‡¶Ü‡¶™‡¶®‡¶ø ${WARN_LIMIT} ‡¶¨‡¶æ‡¶∞ ‡¶ó‡¶æ‡¶≤‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßá‡¶®‡•§`, threadID);
    } else {
      const remaining = WARN_LIMIT - warnData[senderID];
      return api.sendMessage(`‚ö†Ô∏è ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ó‡¶æ‡¶≤‡¶ø ‡¶¶‡¶ø‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶Ü‡¶∞ ${remaining} ‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§`, threadID);
    }
  }
};